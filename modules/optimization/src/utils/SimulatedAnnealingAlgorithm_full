//* This file is part of the MOOSE framework
//* https://www.mooseframework.org
//*
//* All rights reserved, see COPYRIGHT for full restrictions
//* https://github.com/idaholab/moose/blob/master/COPYRIGHT
//*
//* Licensed under LGPL 2.1, please see LICENSE for details
//* https://www.gnu.org/licenses/lgpl-2.1.html

#include "SimulatedAnnealingAlgorithm.h"
#include <limits>
#include <queue>

// The vector_hash struct
// Taken from: https://stackoverflow.com/questions/20511347/a-good-hash-function-for-a-vector
// Used to hash the solutions cache with a map!
struct vector_hash
{
  template <class T1>
  std::size_t operator()(const std::vector<T1> & vector) const
  {
    std::size_t seed = vector.size();
    for (auto & i : vector)
    {
      seed ^= i + 0x9e3779b9 + (seed << 6) + (seed >> 2);
    }
    return seed;
  }
};

SimulatedAnnealingAlgorithm::SimulatedAnnealingAlgorithm()
  : CustomOptimizationAlgorithm(),
    _alpha(1e-2), // used in cooling function calculation
    _temp_max(100.0),
    _temp_min(0.01),
    _min_objective(std::numeric_limits<Real>::max()),
    _cooling(
        QuadAdd), /*    LinMult, ExpMult, LogMult, QuadMult, LinAdd, QuadAdd, ExpAdd, TrigAdd */
    _monotonic_cooling(false), /* Whether cooling is monotonic or not */
    _res_var(1), /*the initial temperature to start resetting the current state to the best found
                       state when this temperature is reached. This temperature is halved every-time
                       it is reached.*/
    _num_swaps(1),
    _num_reassignments(0),
    _real_perturbation_type(RandomDirectionStretching),
    _relative_perturbation(0.05),
    _upper_limit_provided(false),
    _lower_limit_provided(false)
{
}

void
SimulatedAnnealingAlgorithm::solve()
{
  // check that solution size has been set
  if (_size == 0)
    mooseError("Solution size is zero. Most likely setInitialSolution was not called.");

  // check neighbor generation options for int params
  if (_int_state_size > 0 && _num_reassignments > 0 && _valid_options.size() < 2)
    mooseError("If the number of reassignments for neigbor generation is > 0, then the number of "
               "valid options must be at least 2.");

  if (_int_state_size > 0 && _num_swaps + _num_reassignments == 0)
    mooseError("The problem has a non-zero number of categorical parameters, but the number of "
               "swaps and number of reassignments for neighbor generation are both 0.");

  int num_runs = 500;                                            // number of runs to perform
  std::vector<std::pair<Real, std::vector<int>>> best_solutions; // Store best solutions of each

  // set initial neighbor & best states
  std::vector<Real> init_real_solution = _current_real_configuration;
  std::vector<int> init_int_solution = _current_int_configuration;
  std::vector<Real> init_best_real_solution = _current_real_configuration;
  std::vector<int> init_best_int_solution = _current_int_configuration;

  Real current_objective;
  objectiveFunction(
      current_objective, _current_real_configuration, _current_int_configuration, _ctx);

  Real initial_objective = current_objective;
  _min_objective = initial_objective; // Initialize the minimum objective

  std::vector<Real> neighbor_real_solution;
  std::vector<int> neighbor_int_solution;
  std::vector<Real> best_real_solution;
  std::vector<int> best_int_solution;

  for (int run = 0; run < num_runs; ++run)
  {
    // initialization code for each run...
    _it_run = run;
    // the number of "accepted" steps [not necessarily equal to # of traversals of while loop]
    _it_counter = 0;

    _res_var = 1.0;

    // Sets the seed for the random number generator
    MooseRandom::seed(std::time(0) + run);

    Real temp_current = _temp_max; // Current temperature is set to maximum one.

    // Tabu list
    const int max_tabu_size = 100; // maximum size of the Tabu list
    std::deque<std::vector<int>> tabu_list;

    // Solution cache
    std::unordered_map<std::vector<int>, Real, vector_hash> solution_cache;

    neighbor_real_solution = init_real_solution;
    best_real_solution = init_real_solution;

    // Initialize solutions
    if (run == 0)
    {
      neighbor_int_solution = init_int_solution;
      best_int_solution = init_int_solution;
    }
    else
    {
      neighbor_int_solution = best_solutions.front().second;
      best_int_solution = best_solutions.front().second;
      current_objective =
          best_solutions.front().first;   // Update the current objective with the objective value
                                          // from the best solution of the previous runs
      _min_objective = current_objective; // Minimum objective is e_best in the fortran code
    }

    // Keeping track of the accepted solutions!
    // This initializes with 3 pairs, each having a maximum possible objective value and an empty
    // vector of integers
    std::vector<std::pair<Real, std::vector<int>>> solutions(
        3, std::make_pair(std::numeric_limits<Real>::max(), std::vector<int>()));

    // simulated annealing loop
    while (_it_counter < _max_its && std::abs(temp_current) > _temp_min)
    {

      // Sets the seed for the random number generator
      // std::srand(std::time(0));
      // MooseRandom::seed(std::time(0) + _it_counter);

      // get a new neighbor and compute energy
      createNeigborReal(_current_real_configuration, neighbor_real_solution);
      createNeigborInt(_current_int_configuration, neighbor_int_solution, _execlude_domain);

      // Check if neighbor is in Tabu list
      _tabu_used = false;
      if (std::find(tabu_list.begin(), tabu_list.end(), neighbor_int_solution) != tabu_list.end())
      {
        // Neighbor is in Tabu list, skip this iteration
        _tabu_used = true;
        continue;
      }

      Real neigh_objective;

      _cache_used = false;
      auto it = solution_cache.find(neighbor_int_solution);
      if (it != solution_cache.end())
      {
        // If the solution is in the cache, use the cached objective value
        neigh_objective = it->second;
        _cache_used = true;
      }
      else
      {
        // Otherwise, compute the objective value and add it to the cache
        objectiveFunction(neigh_objective, neighbor_real_solution, neighbor_int_solution, _ctx);
        solution_cache[neighbor_int_solution] = neigh_objective;
      }

      // std::cout << "Here is the neighbour objective value:  " << neigh_objective << " !\n\n\n";
      // std::cout << "Here is the current objective value:  " << current_objective << " !\n\n\n";

      // Copy the current solution
      std::vector<int> current_int_solution_copy = _current_int_configuration;

      // acceptance check: lower objective always accepted;
      // acceptance check: lower temps always accepted;
      // higher objective sometimes accepted
      _solution_accepted = false;
      Real temp_r = MooseRandom::rand();
      if (temp_r <= acceptProbability(current_objective, neigh_objective, temp_current))
      {
        // if we accept then it always counts as a new step
        ++_it_counter;
        _current_real_configuration = neighbor_real_solution;
        _current_int_configuration = neighbor_int_solution;
        current_objective = neigh_objective;
        _solution_accepted = true;
        // Add the current solution to the Tabu list
        tabu_list.push_back(_current_int_configuration);

        // If the Tabu list is too big, remove the oldest element
        if (tabu_list.size() > max_tabu_size)
        {
          tabu_list.pop_front();
        }

        // std::cout << "IN THIS STEP, WE ACCEPTED THE SOLUTION!"
        //           << "\n\n\n";
        // std::cout << "The current Objective value is: " << current_objective << "!\n";
        // std::cout << "The neighbor Objective value is: " << neigh_objective << "!\n";
      }
      else
      {
        // otherwise, it has a 10% chance to count as a new step to finish the problem
        // this is especially important for combinatorial problems
        Real temp_rr = MooseRandom::rand();
        if (temp_rr <= 0.1)
          ++_it_counter;

        // std::cout << "IN THIS STEP, WE DID NOT ACCEPT!"
        // << "\n\n\n";
      }

      // cool the temperature
      temp_current = coolingSchedule(_it_counter);

      // if this is the best energy, it's our new best value
      if (current_objective < _min_objective)
      {
        _min_objective = current_objective;
        best_real_solution = _current_real_configuration;
        // best_int_solution = _current_int_configuration;
        best_int_solution = current_int_solution_copy;

        // // Each time you find a better solution, add it to the vector
        solutions.push_back(std::make_pair(_min_objective, best_int_solution));

        // // Find the pair with the worst objective value
        // // Here we are using the iterators functionality in C++
        auto worst_it = std::max_element(solutions.begin(), solutions.end());

        // // If the current objective is better than the worst stored one, replace it
        if (current_objective < worst_it->first)
        {
          *worst_it = std::make_pair(_min_objective, best_int_solution);
        }
      }

      // perform non-monotonic adjustment if applicable
      if (!_monotonic_cooling)
        temp_current *= (1.0 + (current_objective - _min_objective) / current_objective);

      // rewind to best value if reset is enabled
      if (std::abs(temp_current) <= _res_var)
      {
        _res_var *= 0.5;
        current_objective = _min_objective;
        _current_real_configuration = best_real_solution;
        _current_int_configuration = best_int_solution;
      }
    }

    // select the best state we ended up finding
    current_objective = _min_objective;
    _current_real_configuration = best_real_solution;
    _current_int_configuration = best_int_solution;

    // Add the ultimate best solution to the vector
    solutions.push_back(std::make_pair(current_objective, _current_int_configuration));

    // // Find the pair with the worst objective value
    // // Here we are using the iterators functionality in C++
    auto worst_it = std::max_element(solutions.begin(), solutions.end());

    // // If the current objective is better than the worst stored one, replace it
    if (current_objective < worst_it->first)
    {
      *worst_it = std::make_pair(current_objective, _current_int_configuration);
    }

    // Now sort the vector
    std::sort(solutions.begin(), solutions.end());

    std::pair<Real, std::vector<int>> best_pair_one_run = solutions[0];

    // best_solutions.push_back(std::make_pair(_min_objective, _current_int_configuration));
    best_solutions.push_back(best_pair_one_run);
    // After each run, sort the best_solutions vector in ascending order of the objective function
    // value
    std::sort(best_solutions.begin(), best_solutions.end());

    // std::sort(all_accepted_solutions.begin(), all_accepted_solutions.end());

    // Insert the best 3 solutions into the solutions vector
    // for (std::size_t i = 0; i < 3 && i < all_accepted_solutions.size(); i++)
    // {
    //   solutions[i] = all_accepted_solutions[i];
    // }
  }

  // std::pair<Real, std::vector<int>> best_pair = solutions[0];
  std::pair<Real, std::vector<int>> best_pair = best_solutions[0];

  // // Print the best solution and its objective value
  // std::cout << "Best objective value: " << best_pair.first << "\n";
  // std::cout << "Associated solution: ";
  // for (int value : best_pair.second)
  // {
  //   std::cout << value << " ";
  // }
  // std::cout << "\n";

  std::cout << "The best solutions for all runs are as follows: \n";
  for (const auto & pair : best_solutions)
  {
    std::cout << "Objective value: " << pair.first << ", Solution: ";
    for (const auto & val : pair.second)
    {
      std::cout << val << " ";
    }
    std::cout << "\n";
  }

  std::cout << "The overall best solution is:\n";
  std::cout << "Objective value: " << best_pair.first << ", Solution: ";
  for (const auto & val : best_pair.second)
  {
    std::cout << val << " ";
  }
  std::cout << "\n";
}

Real
SimulatedAnnealingAlgorithm::coolingSchedule(unsigned int step) const
{

  auto fraction = (((Real)_max_its - (Real)step) / (Real)_max_its);

  switch (_cooling)
  {
    case LinAdd:
      return _temp_min + (_temp_max - _temp_min) * fraction;

    case ExpMult:
      return _temp_max * std::pow(_alpha, step);

    case QuadAdd:
      return _temp_min + (_temp_max - _temp_min) * std::pow(fraction, 2);
    case trial:
      return _temp_max * std::pow(_temp_min / _temp_max, (Real)step / (Real)_max_its);

    default:
      ::mooseError("Cooling option not yet implemented! Please choose from the follwoing options: "
                   "LinMult, ExpMult, LogMult, QuadMult, LinAdd, QuadAdd, ExpAdd, TrigAdd, trial");
  }

  return 1;
}

void
SimulatedAnnealingAlgorithm::createNeigborReal(const std::vector<Real> & real_sol,
                                               std::vector<Real> & real_neigh) const
{
  if (_real_size == 0)
  {
    real_neigh = {};
    return;
  }

  Real norm = 0;
  for (auto & p : real_sol)
    norm += p * p;
  norm = std::sqrt(norm);

  switch (_real_perturbation_type)
  {
    case RandomDirectionStretching:
      // we need to loop until we find a perturbation
      // that does not violate the parameter limits
      while (true)
      {
        Real norm_perturbation = norm * _relative_perturbation * MooseRandom::randNormal(0.0, 1.0);
        std::vector<Real> dir;
        randomDirection(_real_size, dir);

        bool accept = true;
        for (unsigned int j = 0; j < _real_size; ++j)
        {
          real_neigh[j] = real_sol[j] + norm_perturbation * dir[j];

          if (_upper_limit_provided && real_neigh[j] > _parameter_upper_limit[j])
            accept = false;

          if (_lower_limit_provided && real_neigh[j] < _parameter_lower_limit[j])
            accept = false;

          if (!accept)
            break;
        }

        if (accept)
          return;
      }
      break;
    case BoxSampling:
      if (!_upper_limit_provided || !_lower_limit_provided)
        mooseError("Upper and lower limits must be provided for BoxSampling");

      for (unsigned int j = 0; j < _real_size; ++j)
        real_neigh[j] =
            _parameter_lower_limit[j] +
            MooseRandom::rand() * (_parameter_upper_limit[j] - _parameter_lower_limit[j]);
      break;
    default:
      mooseError("Unrecognized neigbor perturation selection");
  }
}

void
SimulatedAnnealingAlgorithm::createNeigborInt(const std::vector<int> & int_sol,
                                              std::vector<int> & int_neigh,
                                              const std::vector<int> & exclude_values) const
{
  int_neigh = int_sol; // Start with a copy of the current solution

  // Create lists of indices for 0s and 1s
  std::vector<unsigned int> indices_0;
  std::vector<unsigned int> indices_1;
  unsigned int gridSize = static_cast<unsigned int>(sqrt(int_sol.size()));

  for (unsigned int i = 0; i < int_sol.size(); ++i)
  {
    if (int_sol[i] == 0)
    {
      indices_0.push_back(i);
    }
    else
    {
      indices_1.push_back(i);
    }
  }

  // Ensure there are cells of both types to flip
  if (indices_0.empty() || indices_1.empty())
  {
    return;
  }

  const unsigned int MAX_ATTEMPTS = 100; // Limit the number of flip attempts
  unsigned int attempts = 0;

  const unsigned int MAX_CANFLIP_CALLS = 100; // Limit the number of calls to canFlip
  unsigned int canFlipCalls = 0;

  while (attempts < MAX_ATTEMPTS)
  {
    unsigned int index1 = (int_sol[MooseRandom::randl() % int_sol.size()] == 0)
                              ? indices_0[MooseRandom::randl() % indices_0.size()]
                              : indices_1[MooseRandom::randl() % indices_1.size()];

    unsigned int index2 = (int_sol[index1] == 0)
                              ? indices_1[MooseRandom::randl() % indices_1.size()]
                              : indices_0[MooseRandom::randl() % indices_0.size()];

    // Flip the values at the chosen indices
    int_neigh[index1] = (int_neigh[index1] == 1) ? 0 : 1;
    int_neigh[index2] = (int_neigh[index2] == 1) ? 0 : 1;

    // Another way:
    // unsigned int index1 = indices_0[rand() % indices_0.size()];
    // unsigned int index2 = indices_1[rand() % indices_1.size()];
    // // Flip the values at the chosen indices
    // int_neigh[index1] = 1;
    // int_neigh[index2] = 0;

    // Check if the new configuration improves the bounding box density for each cell type
    bool improvedDensity = true;
    for (int cellType : {0, 1}) // Assuming only two cell types for simplicity
    {
      double currentDensity = computeBoundingBoxDensity(int_sol, cellType);
      double newDensity = computeBoundingBoxDensity(int_neigh, cellType);

      if (newDensity < currentDensity)
      {
        improvedDensity = false;
        break;
      }
    }

    if (!improvedDensity)
    {
      // If the density is not improved, revert the changes
      int_neigh[index1] = int_sol[index1];
      int_neigh[index2] = int_sol[index2];
    }
    else if (canFlip(int_sol, index1, index2, _elem_neighbors))
    {
      break; // Exit the loop if a valid configuration is found
    }
    else
    {
      // If not valid, revert the changes and try again
      int_neigh[index1] = int_sol[index1];
      int_neigh[index2] = int_sol[index2];
      attempts++;

      canFlipCalls++;
      if (canFlipCalls >= MAX_CANFLIP_CALLS)
      {
        break; // Exit the loop if we've called canFlip too many times
      }
    }
  }
}

// void
// SimulatedAnnealingAlgorithm::createNeigborInt(const std::vector<int> & int_sol,
//                                               std::vector<int> & int_neigh,
//                                               const std::vector<int> & exclude_values) const
// {
//   std::cout << "Entering createNeigborInt" << std::endl;

//   int_neigh = int_sol; // Start with a copy of the current solution

//   // Create lists of indices for 0s and 1s
//   std::vector<unsigned int> indices_0;
//   std::vector<unsigned int> indices_1;

//   for (unsigned int i = 0; i < int_sol.size(); ++i)
//   {
//     if (int_sol[i] == 0)
//     {
//       indices_0.push_back(i);
//     }
//     else
//     {
//       indices_1.push_back(i);
//     }
//   }

//   // Ensure there are cells of both types to flip
//   if (indices_0.empty() || indices_1.empty())
//   {
//     std::cout << "No cells of one type to flip. Exiting createNeigborInt early." << std::endl;
//     return;
//   }

//   const unsigned int MAX_ATTEMPTS = 10; // Limit the number of flip attempts
//   unsigned int attempts = 0;

//   while (attempts < MAX_ATTEMPTS)
//   {
//     std::cout << "Attempt: " << attempts << std::endl;

//     unsigned int index1 = (int_sol[MooseRandom::randl() % int_sol.size()] == 0)
//                               ? indices_0[MooseRandom::randl() % indices_0.size()]
//                               : indices_1[MooseRandom::randl() % indices_1.size()];

//     unsigned int index2 = (int_sol[index1] == 0)
//                               ? indices_1[MooseRandom::randl() % indices_1.size()]
//                               : indices_0[MooseRandom::randl() % indices_0.size()];

//     // Flip the values at the chosen indices
//     int_neigh[index1] = (int_neigh[index1] == 1) ? 0 : 1;
//     int_neigh[index2] = (int_neigh[index2] == 1) ? 0 : 1;

//     // Check if the new configuration is valid
//     if (canFlip(int_sol, index1, index2, _elem_neighbors))
//     {
//       std::cout << "Valid flip found. Exiting loop." << std::endl;
//       break; // Exit the loop if a valid configuration is found
//     }
//     else
//     {
//       // If not valid, revert the changes and try again
//       int_neigh[index1] = int_sol[index1];
//       int_neigh[index2] = int_sol[index2];
//       attempts++;
//     }
//   }

//   std::cout << "Exiting createNeigborInt" << std::endl;
// }

// void
// SimulatedAnnealingAlgorithm::createNeigborInt(const std::vector<int> & int_sol,
//                                               std::vector<int> & int_neigh,
//                                               const std::vector<int> & exclude_values) const
// {
//   int_neigh = int_sol; // Start with a copy of the current solution

// std::vector<unsigned int> indices_0;
// std::vector<unsigned int> indices_1;

//   for (unsigned int i = 0; i < int_sol.size(); ++i)
//   {
//     if (int_sol[i] == 0)
//     {
//       indices_0.push_back(i);
//     }
//     else
//     {
//       indices_1.push_back(i);
//     }
//   }

//   unsigned int index1 = (int_sol[MooseRandom::randl() % int_sol.size()] == 0)
//                             ? indices_0[MooseRandom::randl() % indices_0.size()]
//                             : indices_1[MooseRandom::randl() % indices_1.size()];

//   unsigned int index2 = (int_sol[index1] == 0) ? indices_1[MooseRandom::randl() %
//   indices_1.size()]
//                                                : indices_0[MooseRandom::randl() %
//                                                indices_0.size()];

//   // unsigned int index1 = MooseRandom::randl() % int_sol.size();
//   // unsigned int index2;

//   // Ensure index2 is different from index1 and that it has the opposite value
//   do
//   {
//     index2 = MooseRandom::randl() % int_sol.size();
//   } while (index2 == index1 || int_sol[index2] == int_sol[index1]);

//   // Flip the values at the chosen indices
//   int_neigh[index1] = (int_neigh[index1] == 1) ? 0 : 1;
//   int_neigh[index2] = (int_neigh[index2] == 1) ? 0 : 1;

//   // Check if the new configuration is valid
//   if (!canFlip(int_sol, index1, int_neigh[index1], _elem_neighbors) ||
//       !canFlip(int_sol, index2, int_neigh[index2], _elem_neighbors))
//   {
//     // If not valid, revert the changes
//     int_neigh[index1] = int_sol[index1];
//     int_neigh[index2] = int_sol[index2];
//   }
// }

// void
// SimulatedAnnealingAlgorithm::createNeigborInt(const std::vector<int> & int_sol,
//                                               std::vector<int> & int_neigh,
//                                               const std::vector<int> & exclude_values) const
// {
//   if (_int_size == 0)
//   {
//     int_neigh = {};
//     return;
//   }

//   int_neigh = int_sol;
//   int min_value = *std::min_element(int_sol.begin(), int_sol.end());
//   int max_value = *std::max_element(int_sol.begin(), int_sol.end());

//   unsigned int index;
//   int attempts = 0;
//   const int MAX_ATTEMPTS = 10;

//   do
//   {
//     index = chooseBoundaryElement(_elem_neighbors, int_neigh);
//     int new_val;
//     do
//     {
//       new_val = MooseRandom::randl() % (max_value - min_value + 1) + min_value;
//     } while (new_val == int_neigh[index] ||
//              std::find(exclude_values.begin(), exclude_values.end(), new_val) !=
//                  exclude_values.end());

//     int_neigh[index] = new_val;

//     attempts++;
//   } while ((isClusterRegular(int_neigh, 0) && isClusterRegular(int_neigh, 1)) == false &&
//            attempts < MAX_ATTEMPTS);

//   if (attempts == MAX_ATTEMPTS)
//   {
//     int_neigh = int_sol; // Revert to original if no valid neighbor found after max attempts
//   }

//   // Check if all possible values are in the new solution
//   std::vector<bool> hasValue(max_value - min_value + 1, false);
//   for (unsigned int i = 0; i < _int_size; ++i)
//   {
//     hasValue[int_neigh[i] - min_value] = true;
//   }

//   // If any value is missing (and not in exclude_values), insert it at a random position
//   for (int i = 0; i <= max_value - min_value; ++i)
//   {
//     if (!hasValue[i] && std::find(exclude_values.begin(), exclude_values.end(), i + min_value)
//     ==
//                             exclude_values.end())
//     {
//       int random_index;
//       // Find a random index whose value is not in exclude_values and satisfies constraints
//       do
//       {
//         random_index = MooseRandom::randl() % _int_size;
//       } while (std::find(exclude_values.begin(), exclude_values.end(), int_neigh[random_index])
//       !=
//                exclude_values.end());

//       int_neigh[random_index] = i + min_value;
//       break;
//     }
//   }
// }

Real
SimulatedAnnealingAlgorithm::acceptProbability(Real curr_obj, Real neigh_obj, Real curr_temp) const
{

  // Metropolis criterion
  Real delta_obj = neigh_obj - curr_obj;
  Real aprob;
  if (-delta_obj / curr_temp <= -700.0)
    aprob = 0.0;
  else if (-delta_obj / curr_temp >= 700.0)
    aprob = 1.0;
  else
    // aprob = std::exp(-delta_obj / curr_temp);
    aprob = std::exp(-delta_obj / curr_temp);

  if (delta_obj <= 0.0)
    aprob = 1.0;

  if (std::isnan(aprob))
    aprob = 0.0;
  return aprob;
}

void
SimulatedAnnealingAlgorithm::setValidReassignmentOptions(const std::set<int> & options)
{
  if (options.size() == 0)
    mooseError("Empty set of options");
  _valid_options.clear();
  _valid_options.resize(options.size());
  unsigned int j = 0;
  for (auto & p : options)
    _valid_options[j++] = p;
}

void
SimulatedAnnealingAlgorithm::setLowerLimits(const std::vector<Real> & lower_limits)
{
  _lower_limit_provided = true;
  _parameter_lower_limit = lower_limits;
  if (_parameter_lower_limit.size() != _real_size)
    mooseError("Lower limits has incorrect size");
}

void
SimulatedAnnealingAlgorithm::setUpperLimits(const std::vector<Real> & upper_limits)
{
  _upper_limit_provided = true;
  _parameter_upper_limit = upper_limits;
  if (_parameter_upper_limit.size() != _real_size)
    mooseError("Upper limits has incorrect size");
}

// Muller & Marsaglia (‘Normalized Gaussians’)
void
SimulatedAnnealingAlgorithm::randomDirection(unsigned int size, std::vector<Real> & direction) const
{
  direction.resize(size);

  // set direction to a vector normally distributed random variables
  for (unsigned int j = 0; j < size; ++j)
    direction[j] = MooseRandom::randNormal(0.0, 1.0);

  // compute the norm of direction
  Real norm = 0.0;
  for (auto & p : direction)
    norm += p * p;
  norm = std::sqrt(norm);

  // normalize
  for (unsigned int j = 0; j < size; ++j)
    direction[j] /= norm;
}

std::vector<int>
SimulatedAnnealingAlgorithm::getNeighbors(const std::map<int, std::vector<int>> & neighborsMap,
                                          const int target_elem_id) const
{
  // If the element exists in the map, return its neighbors; otherwise, return an empty vector.
  if (neighborsMap.find(target_elem_id) != neighborsMap.end())
  {
    return neighborsMap.at(target_elem_id);
  }
  else
  {
    return std::vector<int>();
  }
}

unsigned int
SimulatedAnnealingAlgorithm::countEnclaves(
    const std::vector<int> & int_vec,
    int value,
    const std::map<int, std::vector<int>> & neighborsMap) const
{
  std::vector<int> visited(int_vec.size(), 0);
  unsigned int regions = 0;
  unsigned int max_regions = (value == 0) ? 2 : 1;

  // std::cout << "Starting countEnclaves for value: " << value << "\n";

  for (unsigned int i = 0; i < int_vec.size() && regions <= max_regions; ++i)
  {
    if (int_vec[i] == value && visited[i] == 0)
    {
      // std::cout << "Found a new region at index: " << i << "\n";

      std::queue<int> queue;
      queue.push(i);
      visited[i] = 1;
      regions++;

      if (regions > max_regions)
      {
        // std::cout << "Regions exceeded max allowed regions. Exiting...\n";
        return regions;
      }

      while (!queue.empty())
      {
        int current = queue.front();
        queue.pop();

        for (int neighbor : getNeighbors(neighborsMap, current))
        {
          if (int_vec[neighbor] == value && visited[neighbor] == 0)
          {
            queue.push(neighbor);
            visited[neighbor] = 1;
          }
        }
      }
    }
  }

  // std::cout << "Total regions for value " << value << ": " << regions << "\n";
  return regions;
}

// bool
// SimulatedAnnealingAlgorithm::canFlip(const std::vector<int> & int_vec,
//                                      unsigned int index1,
//                                      unsigned int index2,
//                                      const std::map<int, std::vector<int>> & neighborsMap) const
// {
//   // std::cout << "Entering canFlip" << std::endl;

//   std::vector<int> testVec = int_vec;
//   testVec[index1] = (testVec[index1] == 1) ? 0 : 1;
//   testVec[index2] = (testVec[index2] == 1) ? 0 : 1;

//   unsigned int count0 = countEnclaves(testVec, 0, neighborsMap);
//   unsigned int count1 = countEnclaves(testVec, 1, neighborsMap);

//   // std::cout << "Current counts - 0s: " << count0 << ", 1s: " << count1 << std::endl;

//   if (count0 > 2 || count1 > 1)
//   {
//     // std::cout << "Exiting canFlip with result: false" << std::endl;
//     return false;
//   }

//   // std::cout << "Exiting canFlip with result: true" << std::endl;
//   return true;
// }
bool
SimulatedAnnealingAlgorithm::canFlip(const std::vector<int> & int_vec,
                                     unsigned int index1,
                                     unsigned int index2,
                                     const std::map<int, std::vector<int>> & neighborsMap) const
{
  std::vector<int> testVec = int_vec;
  testVec[index1] = (testVec[index1] == 1) ? 0 : 1;
  testVec[index2] = (testVec[index2] == 1) ? 0 : 1;

  // First, check the new constraints
  if (!checkConstraints(testVec, neighborsMap))
    return false;

  // Now, check the previous constraints regarding the number of enclaves
  unsigned int count0 = countEnclaves(testVec, 0, neighborsMap);
  unsigned int count1 = countEnclaves(testVec, 1, neighborsMap);

  if (count0 > 2 || count1 > 1)
    return false;

  return true;
}

// void
// SimulatedAnnealingAlgorithm::createNeigborInt(const std::vector<int> & int_sol,
//                                               std::vector<int> & int_neigh,
//                                               const std::vector<int> & exclude_values) const
// {
//   if (_int_size == 0)
//   {
//     int_neigh = {};
//     return;
//   }

//   unsigned int index;
//   int_neigh = int_sol;

//   int min_value = *std::min_element(int_sol.begin(), int_sol.end());
//   int max_value = *std::max_element(int_sol.begin(), int_sol.end());

//   const int MAX_TOTAL_ATTEMPTS = 1000; // Adjust as necessary
//   int totalAttempts = 0;

//   // Find a random index whose value is not in exclude_values
//   do
//   {
//     index = MooseRandom::randl() % _int_size;
//     totalAttempts++;
//   } while (std::find(exclude_values.begin(), exclude_values.end(), int_neigh[index]) !=
//                exclude_values.end() &&
//            totalAttempts < MAX_TOTAL_ATTEMPTS);

//   if (totalAttempts >= MAX_TOTAL_ATTEMPTS)
//   {
//     int_neigh = int_sol;
//     return;
//   }

//   int new_val;
//   const int MAX_FAILED_ATTEMPTS = 100;
//   int failedAttempts = 0;

//   do
//   {
//     new_val = MooseRandom::randl() % (max_value - min_value + 1) + min_value;
//     if (!canFlip(int_neigh, index, new_val, _elem_neighbors))
//     {
//       failedAttempts++;
//     }
//     else
//     {
//       failedAttempts = 0;
//     }
//     totalAttempts++;
//   } while (!canFlip(int_neigh, index, new_val, _elem_neighbors) &&
//            failedAttempts < MAX_FAILED_ATTEMPTS && totalAttempts < MAX_TOTAL_ATTEMPTS);

//   if (failedAttempts >= MAX_FAILED_ATTEMPTS || totalAttempts >= MAX_TOTAL_ATTEMPTS)
//   {
//     int_neigh = int_sol;
//     return;
//   }
//   else
//   {
//     int_neigh[index] = new_val;
//   }

//   // int_neigh[index] = new_val;

//   // Check if all possible values are in the new solution
//   std::vector<bool> hasValue(max_value - min_value + 1, false);
//   for (unsigned int i = 0; i < _int_size; ++i)
//   {
//     hasValue[int_neigh[i] - min_value] = true;
//   }

//   // If any value is missing (and not in exclude_values), insert it at a random position
//   for (int i = 0; i <= max_value - min_value; ++i)
//   {
//     if (!hasValue[i] && std::find(exclude_values.begin(), exclude_values.end(), i + min_value)
//     ==
//                             exclude_values.end())
//     {
//       int random_index;
//       // Find a random index whose value is not in exclude_values and satisfies constraints
//       do
//       {
//         random_index = MooseRandom::randl() % _int_size;
//       } while (std::find(exclude_values.begin(), exclude_values.end(), int_neigh[random_index])
//       !=
//                    exclude_values.end() ||
//                !canFlip(int_neigh, random_index, i + min_value, _elem_neighbors));

//       int_neigh[random_index] = i + min_value;
//       break;
//     }
//   }
// }

// bool
// SimulatedAnnealingAlgorithm::canFlip(const std::vector<int> & int_vec,
//                                      unsigned int index,
//                                      int new_value,
//                                      const std::map<int, std::vector<int>> & neighborsMap)
//                                      const
// {
//   std::vector<int> testVec = int_vec;
//   testVec[index] = new_value;

//   // Convert 1D vector to 2D grid
//   int size = std::sqrt(int_vec.size());
//   std::vector<std::vector<int>> grid(size, std::vector<int>(size));

//   for (int i = 0; i < size; ++i)
//   {
//     for (int j = 0; j < size; ++j)
//     {
//       grid[i][j] = testVec[i * size + j];
//       assert(grid[i][j] == int_vec[i * size + j] ||
//              (i * size + j) == index); // Ensure the conversion is correct
//     }
//   }

//   // Use the isValid function to check the validity of the grid
//   return isValid(grid);
// }

int
SimulatedAnnealingAlgorithm::chooseBoundaryElement(
    const std::map<int, std::vector<int>> & neighborsMap, const std::vector<int> & int_sol) const
{
  std::vector<int> boundaryElements;

  for (int i = 0; i < int_sol.size(); i++)
  {
    std::vector<int> neighbors = getNeighbors(neighborsMap, i);
    for (int neighbor : neighbors)
    {
      if (int_sol[neighbor] != int_sol[i])
      {
        boundaryElements.push_back(i);
        break;
      }
    }
  }

  if (boundaryElements.empty())
  {
    return MooseRandom::randl() % int_sol.size(); // fallback to a random element
  }

  // Choose a random boundary element
  return boundaryElements[MooseRandom::randl() % boundaryElements.size()];
}

// bool
// SimulatedAnnealingAlgorithm::isClusterRegular(const std::vector<int> & solution, int value)
// const
// {
//   const int width = 20;
//   int minX = INT_MAX, minY = INT_MAX, maxX = INT_MIN, maxY = INT_MIN;

//   for (int i = 0; i < solution.size(); i++)
//   {
//     if (solution[i] == value)
//     {
//       int x = i % width;
//       int y = i / width;
//       minX = std::min(minX, x);
//       minY = std::min(minY, y);
//       maxX = std::max(maxX, x);
//       maxY = std::max(maxY, y);
//     }
//   }

//   int boundingBoxArea = (maxX - minX + 1) * (maxY - minY + 1);
//   int clusterSize = std::count(solution.begin(), solution.end(), value);

//   double threshold = 0.9;
//   return (double)clusterSize / boundingBoxArea > threshold;
// }

// void
// SimulatedAnnealingAlgorithm::createNeigborInt(const std::vector<int> & int_sol,
//                                               std::vector<int> & int_neigh,
//                                               const std::vector<int> & exclude_values) const
// {
//   if (_int_size == 0)
//   {
//     int_neigh = {};
//     return;
//   }

//   unsigned int index;
//   int_neigh = int_sol;

//   int min_value = *std::min_element(int_sol.begin(), int_sol.end());
//   int max_value = *std::max_element(int_sol.begin(), int_sol.end());

//   // Find a random index whose value is not in exclude_values
//   do
//   {
//     index = MooseRandom::randl() % _int_size;
//   } while (std::find(exclude_values.begin(), exclude_values.end(), int_neigh[index]) !=
//            exclude_values.end());

//   int new_val;
//   const int MAX_FAILED_ATTEMPTS = 100;
//   int failedAttempts = 0;

//   do
//   {
//     new_val = MooseRandom::randl() % (max_value - min_value + 1) + min_value;
//     if (!canFlip(int_neigh, index, new_val, _elem_neighbors))
//     {
//       failedAttempts++;
//     }
//     else
//     {
//       failedAttempts = 0;
//     }
//   } while (!canFlip(int_neigh, index, new_val, _elem_neighbors) &&
//            failedAttempts < MAX_FAILED_ATTEMPTS);

//   if (failedAttempts >= MAX_FAILED_ATTEMPTS)
//   {
//     int_neigh = int_sol;
//   }
//   else
//   {
//     int_neigh[index] = new_val;
//   }

//   // Check if all possible values are in the new solution
//   std::vector<bool> hasValue(max_value - min_value + 1, false);
//   for (unsigned int i = 0; i < _int_size; ++i)
//   {
//     hasValue[int_neigh[i] - min_value] = true;
//   }

//   for (int i = 0; i <= max_value - min_value; ++i)
//   {
//     if (!hasValue[i] && std::find(exclude_values.begin(), exclude_values.end(), i + min_value)
//     ==
//                             exclude_values.end())
//     {
//       int random_index;
//       do
//       {
//         random_index = MooseRandom::randl() % _int_size;
//       } while (std::find(exclude_values.begin(), exclude_values.end(), int_neigh[random_index])
//       !=
//                    exclude_values.end() ||
//                !canFlip(int_neigh, random_index, i + min_value, _elem_neighbors));

//       int_neigh[random_index] = i + min_value;
//       break;
//     }
//   }
// }

bool
SimulatedAnnealingAlgorithm::isValid(const std::vector<std::vector<int>> & grid) const
{
  int size_in = grid.size();
  int n_fuel = static_cast<int>(round(size_in * size_in * 0.57702722208));

  // 1. Check if the left and top sides have some fuel touching
  if (std::accumulate(grid.begin(),
                      grid.end(),
                      0,
                      [](int sum, const std::vector<int> & row) { return sum + row[0]; }) <= 0 ||
      std::accumulate(grid[0].begin(), grid[0].end(), 0) <= 0)
  {
    return false;
  }

  // 2. Ensure the bottom and right sides don't have any fuel touching
  if (std::accumulate(grid.begin(),
                      grid.end(),
                      0,
                      [](int sum, const std::vector<int> & row) { return sum + row.back(); }) > 0 ||
      std::accumulate(grid.back().begin(), grid.back().end(), 0) > 0)
  {
    return false;
  }

  // 3. Check that the main fuel enclave is continuous

  const int MAX_ITERATIONS = 100; // Adjust as necessary
  int iterations = 0;

  std::vector<std::vector<int>> main_enc(size_in, std::vector<int>(size_in, 0));
  int i = 0;
  while (i < size_in && grid[i][0] != 1)
  {
    i++;
  }
  if (i >= size_in)
  {
    return false; // Not a valid location
  }
  main_enc[i][0] = 1;
  int enc_count = 0;
  int prev_enc_count;
  do
  {
    prev_enc_count = enc_count;
    enc_count = 0;
    for (int i = 0; i < size_in; ++i)
    {
      for (int j = 0; j < size_in; ++j)
      {
        if (grid[i][j] == 1)
        {
          if (i > 0 && main_enc[i - 1][j] == 1)
            main_enc[i][j] = 1;
          if (i < size_in - 1 && main_enc[i + 1][j] == 1)
            main_enc[i][j] = 1;
          if (j > 0 && main_enc[i][j - 1] == 1)
            main_enc[i][j] = 1;
          if (j < size_in - 1 && main_enc[i][j + 1] == 1)
            main_enc[i][j] = 1;
        }
        if (main_enc[i][j] == 1)
        {
          enc_count++;
        }
      }
    }
  } while (enc_count != prev_enc_count && iterations < MAX_ITERATIONS);
  if (enc_count != n_fuel)
  {
    return false;
  }

  // Reset for the water enclave:
  iterations = 0;

  // 4. Ensure there are no more than two total water enclaves
  main_enc = std::vector<std::vector<int>>(size_in, std::vector<int>(size_in, 0));
  for (int i = 0; i < size_in; ++i)
  {
    main_enc[i][size_in - 1] = 1; // Right boundary
    main_enc[size_in - 1][i] = 1; // Bottom boundary
  }

  enc_count = 0;
  prev_enc_count = -1;
  do
  {
    prev_enc_count = enc_count;
    enc_count = 0;
    for (int i = 0; i < size_in; ++i)
    {
      for (int j = 0; j < size_in; ++j)
      {
        if (grid[i][j] == 0)
        {
          if (i > 0 && main_enc[i - 1][j] == 1)
            main_enc[i][j] = 1;
          if (i < size_in - 1 && main_enc[i + 1][j] == 1)
            main_enc[i][j] = 1;
          if (j > 0 && main_enc[i][j - 1] == 1)
            main_enc[i][j] = 1;
          if (j < size_in - 1 && main_enc[i][j + 1] == 1)
            main_enc[i][j] = 1;
        }
        if (main_enc[i][j] == 1)
        {
          enc_count++;
        }
      }
    }
  } while (enc_count != prev_enc_count && iterations < MAX_ITERATIONS);

  int tot_count = enc_count;
  if (grid[0][0] == 0)
  { // If there's another enclave starting at 1,1
    main_enc = std::vector<std::vector<int>>(size_in, std::vector<int>(size_in, 0));
    main_enc[0][0] = 1;

    enc_count = 0;
    prev_enc_count = -1;

    // Reset :
    iterations = 0;

    do
    {
      prev_enc_count = enc_count;
      enc_count = 0;
      for (int i = 0; i < size_in; ++i)
      {
        for (int j = 0; j < size_in; ++j)
        {
          if (grid[i][j] == 0)
          {
            if (i > 0 && main_enc[i - 1][j] == 1)
              main_enc[i][j] = 1;
            if (i < size_in - 1 && main_enc[i + 1][j] == 1)
              main_enc[i][j] = 1;
            if (j > 0 && main_enc[i][j - 1] == 1)
              main_enc[i][j] = 1;
            if (j < size_in - 1 && main_enc[i][j + 1] == 1)
              main_enc[i][j] = 1;
          }
          if (main_enc[i][j] == 1)
          {
            enc_count++;
          }
        }
      }
    } while (enc_count != prev_enc_count && iterations < MAX_ITERATIONS);
    tot_count += enc_count;
  }

  if (tot_count != size_in * size_in - n_fuel)
  {
    return false;
  }

  return true;
}

bool
SimulatedAnnealingAlgorithm::checkConstraints(
    const std::vector<int> & int_vec, const std::map<int, std::vector<int>> & neighborsMap) const
{
  unsigned int gridSize = std::sqrt(int_vec.size());

  // Constraint 2: Ensure 0s are touching the boundaries and no 1s near boundaries
  for (unsigned int i = 0; i < gridSize; ++i)
  {
    if (int_vec[i] == 1 || int_vec[i * gridSize] == 1 ||
        int_vec[i * gridSize + (gridSize - 1)] == 1 || int_vec[(gridSize - 1) * gridSize + i] == 1)
      return false;
  }

  // Constraint 3: All regions should be contiguous
  std::vector<int> visited(int_vec.size(), 0);
  unsigned int regions0 = countEnclaves(int_vec, 0, neighborsMap);
  unsigned int regions1 = countEnclaves(int_vec, 1, neighborsMap);

  // Constraint 1: There should be 2 regions of 0s and 1 region of 1s
  if (regions0 != 2 || regions1 != 1)
    return false;

  // Constraint 4: The two regions of 0s should not be connected is inherently satisfied
  // by the fact that there are two separate regions of 0s.

  return true;
}

double
SimulatedAnnealingAlgorithm::computeBoundingBoxDensity(const std::vector<int> & int_vec,
                                                       int cellType) const
{

  unsigned int gridSize = static_cast<unsigned int>(sqrt(int_vec.size()));

  unsigned int min_i = gridSize, max_i = 0;
  unsigned int min_j = gridSize, max_j = 0;
  unsigned int cellCount = 0;

  for (unsigned int i = 0; i < gridSize; ++i)
  {
    for (unsigned int j = 0; j < gridSize; ++j)
    {
      if (int_vec[i * gridSize + j] == cellType)
      {
        min_i = std::min(min_i, i);
        max_i = std::max(max_i, i);
        min_j = std::min(min_j, j);
        max_j = std::max(max_j, j);
        cellCount++;
      }
    }
  }

  unsigned int boundingBoxArea = (max_i - min_i + 1) * (max_j - min_j + 1);
  if (boundingBoxArea == 0)
    return 0; // Avoid division by zero

  return static_cast<double>(cellCount) / boundingBoxArea;
}
